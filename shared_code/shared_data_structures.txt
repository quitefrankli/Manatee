/*
	Standard Uniform Buffer Layout
	The 'base alignment' of the type of an OpTypeStruct member of is defined recursively as follows:
	A scalar of size N has a base alignment of N.
	A two-component vector, with components of size N, has a base alignment of 2 N.
	A three- or four-component vector, with components of size N, has a base alignment of 4 N.
	An array has a base alignment equal to the base alignment of its element type, rounded up to a multiple of 16.
	A structure has a base alignment equal to the largest base alignment of any of its members, rounded up to a multiple of 16.
	A row-major matrix of C columns has a base alignment equal to the base alignment of a vector of C matrix components.
	A column-major matrix has a base alignment equal to the base alignment of the matrix column type.
*/

struct MaterialData
{
	ALIGN(16) VEC3 ambient;
	ALIGN(16) VEC3 diffuse;
	ALIGN(16) VEC3 specular;
	ALIGN(16) VEC3 emissive;
	ALIGN(4) float shininess;

	// TODO: branching in glsl is expensive especially with storage buffers
	// we should convert MaterialData to a uniform buffer in the future
	ALIGN(4) int texture_flags; // uses boolean packing
};

// be vary of alignment issues
struct ObjectData
{
	MAT4 model;
    MAT4 mvp; // precomputed model-view-proj matrix
    CPP_MAT4_GLSL_MAT3 rot_mat; // glsl matrix specific alignment issue workaround
};

struct GlobalData
{
    MAT4 view; // camera
    MAT4 proj;
    ALIGN(16) VEC3 view_pos; // camera eye
    ALIGN(16) VEC3 light_pos;
    ALIGN(4) float lighting_scalar;
};

// in glsl this refers to the set index in the layout, in c++ this refers to the descriptor set offset
const int RASTERIZATION_LOW_FREQ_SET_OFFSET = 0;
const int RASTERIZATION_HIGH_FREQ_PER_OBJ_SET_OFFSET = 1;
const int RASTERIZATION_HIGH_FREQ_PER_SHAPE_SET_OFFSET = 2;
const int RASTERIZATION_SHADOW_MAP_SET_OFFSET = 3;

const int RAYTRACING_LOW_FREQ_SET_OFFSET = 0;
const int RAYTRACING_TLAS_SET_OFFSET = 1;
const int RAYTRACING_MESH_DATA_SET_OFFSET = 2;

// in glsl this refers to the binding index in the layout, in c++ this refers to the descriptor binding
const int GLOBAL_DATA_BINDING = 0;
const int BUFFER_MAPPER_BINDING = 0;
const int VERTICES_DATA_BINDING = 1;
const int INDICES_DATA_BINDING = 2;

const int RASTERIZATION_GLOBAL_DATA_BINDING = GLOBAL_DATA_BINDING;
const int RASTERIZATION_OBJECT_DATA_BINDING = 0;
const int RASTERIZATION_ALBEDO_TEXTURE_DATA_BINDING = 1;
const int RASTERIZATION_MATERIAL_DATA_BINDING = 2;
const int RASTERIZATION_BONE_DATA_BINDING = 1;
const int RASTERIZATION_SHADOW_MAP_DATA_BINDING = 0;

const int RAYTRACING_GLOBAL_DATA_BINDING = GLOBAL_DATA_BINDING;
const int RAYTRACING_TLAS_DATA_BINDING = 0;
const int RAYTRACING_ALBEDO_TEXTURE_DATA_BINDING = RASTERIZATION_ALBEDO_TEXTURE_DATA_BINDING;
const int RAYTRACING_OUTPUT_IMAGE_BINDING = 1;
const int RAYTRACING_BUFFER_MAPPER_BINDING = BUFFER_MAPPER_BINDING;
const int RAYTRACING_VERTICES_DATA_BINDING = VERTICES_DATA_BINDING;
const int RAYTRACING_INDICES_DATA_BINDING = INDICES_DATA_BINDING;

// maps object id to starting offset in the vertex, index and uniform buffers
struct BufferMapEntry
{
	UINT vertex_offset;
	UINT index_offset;
	UINT uniform_offset;
};

const UINT BUFFER_MAP_ENTRY_SIZE = 12;

struct ColorVertex
{
	VEC3 pos;
	VEC3 normal;

#ifdef CPPONLY
	bool operator==(const ColorVertex& other) const
	{
		return pos == other.pos && normal == other.normal;
	};
#endif
};

const UINT COLOR_VERTEX_SIZE = 6;

struct TexVertex
{
	VEC3 pos;
	VEC3 normal;
	VEC2 texCoord;

#ifdef CPPONLY
	bool operator==(const TexVertex& other) const
	{
		return pos == other.pos && texCoord == other.texCoord && normal == other.normal;
	};
#endif
};

struct SkinnedVertex
{
	// although bone_ids is really supposed to be an integer array we are using a vec4 for convenience with glsl
	VEC4 bone_ids;
	VEC4 bone_weights;
	ALIGN(16) VEC3 pos;
	ALIGN(16) VEC3 normal;
	ALIGN(8) VEC2 texCoord;
};

struct Bone
{
	MAT4 inverse_transform; // inverse bind pose, used to transform vertices to bone space
	MAT4 final_transform;
};

struct QuadRendererPushConstant
{
	int flags;
};