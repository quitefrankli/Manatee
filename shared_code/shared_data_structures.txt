/*
	Standard Uniform Buffer Layout

	The 'base alignment' of the type of an OpTypeStruct member of is defined recursively as follows:

	A scalar of size N has a base alignment of N.

	A two-component vector, with components of size N, has a base alignment of 2 N.

	A three- or four-component vector, with components of size N, has a base alignment of 4 N.

	An array has a base alignment equal to the base alignment of its element type, rounded up to a multiple of 16.

	A structure has a base alignment equal to the largest base alignment of any of its members, rounded up to a multiple of 16.

	A row-major matrix of C columns has a base alignment equal to the base alignment of a vector of C matrix components.

	A column-major matrix has a base alignment equal to the base alignment of the matrix column type.
*/

struct MaterialData
{
	ALIGN(16) VEC3 ambient;
	ALIGN(16) VEC3 diffuse;
	ALIGN(16) VEC3 specular;
	ALIGN(16) VEC3 emissive;
	ALIGN(4) float shininess;
};

// be vary of alignment issues
struct ObjectData
{
	MAT4 model;
    MAT4 mvp; // precomputed model-view-proj matrix
    CPP_MAT4_GLSL_MAT3 rot_mat; // glsl alignment issue workaround
};

struct GlobalData
{
    MAT4 view; // camera
    MAT4 proj;
    ALIGN(16) VEC3 view_pos; // camera eye
    ALIGN(16) VEC3 light_pos;
    ALIGN(4) float lighting_scalar;
};